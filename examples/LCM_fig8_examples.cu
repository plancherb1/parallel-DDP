/***
nvcc -std=c++11 -o fig8.exe LCM_fig8_examples.cu ../utils/cudaUtils.cu ../utils/threadUtils.cpp -llcm -gencode arch=compute_61,code=sm_61 -O3
***/
#define USE_WAFR_URDF 0
#define EE_COST_PDDP 1
#define USE_SMOOTH_ABS 0
#define USE_EE_VEL_COST 0
#define USE_LIMITS_FLAG 0

#define MPC_MODE 1
#define USE_LCM 1
#define USE_VELOCITY_FILTER 0
#define HARDWARE_MODE 1
#define USE_ALG_TRACE 0
#define USE_MAX_SOLVER_TIME 0
#define USE_FEEDBACK_IN_TRAJ_RUNNER 1
#define TRAJ_RUNNER_TIME_STEPS NUM_TIME_STEPS/4
#define PD_GAINS_ON_STATE 0

#define IGNORE_MAX_ROX_EXIT 0
#define TOL_COST 0.00001
#define SOLVES_TO_RESET 15
#define PLANT 4

#define E_NORM_LIM 0.05
#define V_NORM_LIM 0.05
#define TRAJ_RUNNER_ALPHA 0 // smoothing on torque and pos commands per command

#if USE_EE_VEL_COST
	// default cost terms for the start of the goal to drop the arm from the initial point to the start of the fig 8
	// delta xyz, delta rpy, u, xzyrpyd, xyzrpy
	#define SMALL 0//0.00001
	#define _Q_EE1 50.0
	#define _Q_EE2 SMALL
	#define _R_EE 0.001
	#define _QF_EE1 100.0
	#define _QF_EE2 SMALL
	#define _Q_xdEE 10.0
	#define _QF_xdEE 10.0
	#define _Q_xEE SMALL
	#define _QF_xEE SMALL
	#define _Q_EEV1 0.0
	#define _Q_EEV2 0.0
	#define _QF_EEV1 0.0
	#define _QF_EEV2 0.0
	// new cost terms for the actual fig 8 tracking
	#define _Q_EE1_fig8 300.0
	#define _Q_EE2_fig8 SMALL
	#define _R_EE_fig8 0.0005 // make 0.001 for the move to inital goal and then to 0.0005 for motion
	#define _QF_EE1_fig8 300.0
	#define _QF_EE2_fig8 SMALL
	#define _Q_xdEE_fig8 10.0
	#define _QF_xdEE_fig8 10.0
	#define _Q_xEE_fig8 1.0
	#define _QF_xEE_fig8 1.0
	#define _Q_EEV1_fig8 0
	#define _Q_EEV2_fig8 0
	#define _QF_EEV1_fig8 0
	#define _QF_EEV2_fig8 0
#else
	// default cost terms for the start of the goal to drop the arm from the initial point to the start of the fig 8
	// delta xyz, delta rpy, u, xzyrpyd, xyzrpy
	#define SMALL 0//0.00001
	#define _Q_EE1 50.0
	#define _Q_EE2 SMALL
	#define _R_EE 0.001
	#define _QF_EE1 100.0
	#define _QF_EE2 SMALL
	#define _Q_xdEE 10.0
	#define _QF_xdEE 10.0
	#define _Q_xEE SMALL
	#define _QF_xEE SMALL
	// new cost terms for the actual fig 8 tracking
	#define _Q_EE1_fig8 300.0
	#define _Q_EE2_fig8 SMALL
	#define _R_EE_fig8 0.001 // make 0.001 for the move to inital goal and then to 0.0005 for motion
	#define _QF_EE1_fig8 300.0
	#define _QF_EE2_fig8 SMALL
	#define _Q_xdEE_fig8 5.0
	#define _QF_xdEE_fig8 5.0
	#define _Q_xEE_fig8 5.0
	#define _QF_xEE_fig8 5.0
	#define _Q_EEV1_fig8 0
	#define _Q_EEV2_fig8 0
	#define _QF_EEV1_fig8 0
	#define _QF_EEV2_fig8 0
#endif

#include "../config.cuh"

template <typename T>
class LCM_Fig8Goal_Handler {
    public:
    	double totalTime;	double zeroTime;	int inFig8;
    	double eNormLim;	double vNormLim;	int costSent;
    	double totalError;	int numIters;		int currRep;
    	int iterLimit;		int timeLimit;		bool PDGoals;
    	lcm::LCM lcm_ptr; // ptr to LCM object for publish ability
    	struct timeval start, end; int timeCount; double timeTotal;
    	// and the goals
    	T qGoals[1000*NUM_POS] = {0.1319032852479467,0.812391269587935,0.09537645185776193,-1.2509631815267037,0.02108845590288118,0.9930309784741906,0.0,0.12305447345157258,0.7946203569295,0.0900355044467693,-1.2555023563005003,0.020003875101325085,0.9992060911189372,0.0,0.11415587604772467,0.7765537928500861,0.08452003748952719,-1.259394398236225,0.01883951337245013,1.005197895493979,0.0,0.10522641822282422,0.758291123126884,0.0788135721282965,-1.2625661417122302,0.017627606589391755,1.0109887917492155,0.0,0.0962770427058836,0.7399265761620413,0.07291789873024591,-1.2649612756566473,0.016370743251924596,1.0165367556298854,0.0,0.08732002056082648,0.7215549607347279,0.06683501609887328,-1.2665272590877787,0.015066231113255911,1.0218054831526422,0.0,0.07836191167239041,0.7032693160794833,0.060576293761956404,-1.2672199927131316,0.01370712659967967,1.0267557526553106,0.0,0.06940557639580833,0.6851597261403722,0.054156179166728935,-1.2670050093584393,0.01229620917348145,1.0313443079121882,0.0,0.06045582379750481,0.6673144419852501,0.04758622426790547,-1.2658539688021584,0.010839513870206048,1.0355326423633913,0.0,0.051517777304948456,0.6498191475332359,0.040878494016578906,-1.2637453401969991,0.00934121752604969,1.0392865860996265,0.0,0.04259563731293972,0.6327558891797559,0.0340468591913313,-1.2606655243163372,0.007804629932046335,1.0425748190229076,0.0,0.03369262221202635,0.6162022939494921,0.027106707124818406,-1.2566092429426001,0.006233113302708914,1.0453687879138485,0.0,0.024811148889874172,0.6002309194509234,0.020074492837617523,-1.2515796334185445,0.004630312783483689,1.0476430617091907,0.0,0.01595326546554004,0.5848852963522988,0.0129669830434622,-1.245577082716146,0.003000279645896624,1.0493770107144906,0.0,0.007119704895903224,0.5702736156102557,0.005802493666195074,-1.2386427918851277,0.001346805461055975,1.0505493783107402,0.0,-0.001707690635652067,0.5564262174986554,-0.0014158435010569043,-1.2307939893913402,-0.00032944587706683435,1.0511489696239888,0.0,-0.01048996867246991,0.5433900354243303,-0.008641892806909648,-1.2220670542574188,-0.0020168014410988813,1.0511640470448325,0.0,-0.019245595567281185,0.5312045123208662,-0.015873178308670015,-1.2125059718697,-0.003714731953100762,1.0505903420447602,0.0,-0.02797539395336816,0.5199022935591098,-0.023091506274967456,-1.2021609575352314,-0.005419147616681579,1.0494289592843327,0.0,-0.03667893076171072,0.5095080703760336,-0.03028103035716137,-1.1910899307897949,-0.007125946677577704,1.0476841478843313,0.0,-0.04535622068002245,0.500039178284699,-0.03742592031214121,-1.1793569412257554,-0.008831193976870714,1.0453658133968173,0.0,-0.05400720130769057,0.4915055712681572,-0.044511001922855446,-1.1670319736645909,-0.010531082299732078,1.0424890176366424,0.0,-0.06263162905561948,0.4839100209784459,-0.05152178558085874,-1.1541904619383827,-0.012221931335668278,1.0390740294876233,0.0,-0.07122895863275369,0.4772483931796169,-0.05844447924172208,-1.140912793545688,-0.013900178961611814,1.0351463464694346,0.0,-0.07979820365176139,0.47150999266584503,-0.06526599383848473,-1.1272838128674862,-0.015562367966635585,1.0307366850366906,0.0,-0.08833777789343866,0.4666779684994271,-0.07197394863967264,-1.113392328007772,-0.017205130991423893,1.0258809376029112,0.0,-0.09688772719853411,0.4626657695566884,-0.07858885720828562,-1.0991825377969078,-0.018833546641567035,1.020571275209451,0.0,-0.10538206893809336,0.4596350361412396,-0.0850522701953875,-1.0851181294188605,-0.020431224627797284,1.014965343496415,0.0,-0.11381353036714836,0.45751768983639,-0.09135499013346142,-1.071289976813417,-0.021995139874347605,1.009124137062344,0.0,-0.12217166544508279,0.4562457723834503,-0.09748673944513021,-1.0577873810665093,-0.02352176578808151,1.0031105123898276,0.0,-0.13045383957666246,0.4557552948510636,-0.10344515466276674,-1.04468925465678,-0.025009398315477917,0.9969834623498183,0.0,-0.13865157852035143,0.45598365010088004,-0.10922539922578875,-1.032074844841731,-0.026455640301830525,0.9908038117218066,0.0,-0.14675336270083592,0.4568666571654708,-0.11482225504286937,-1.020013020214401,-0.027857996454900093,0.9846296950189568,0.0,-0.15475611354401436,0.4583486599613602,-0.12023839836653863,-1.0085636528262645,-0.02921585839773982,0.9785135374091616,0.0,-0.1626506867512453,0.4603775039831825,-0.12547405975331072,-0.9977900423234709,-0.030528052767946033,0.9725094685405302,0.0,-0.1704219629759218,0.4629017661033597,-0.13052746452014882,-0.9877530972564385,-0.03179304354391306,0.9666713712836823,0.0,-0.178059695859264,0.4658813634331754,-0.13540256993369945,-0.978516898598329,-0.033010575346144364,0.9610525328212987,0.0,-0.1855474783434112,0.46927518837209864,-0.14010023017050727,-0.9701383463983173,-0.034179563051467854,0.9557043433103749,0.0,-0.19286526491532016,0.47304669439496994,-0.14462001913468994,-0.9626787298090325,-0.03529836326375637,0.9506795670085991,0.0,-0.1999900124150932,0.47716026839478004,-0.14896019168807878,-0.9561915152312669,-0.036365065456459233,0.946026551139316,0.0,-0.20690460505348993,0.4815875037161234,-0.15312312647736676,-0.9507155585063515,-0.037378939110520794,0.941783280083763,0.0,-0.2135919521662298,0.4863063614725089,-0.15711155831596024,-0.9462858059515964,-0.038339505654461266,0.937983022729462,0.0,-0.2200303506676678,0.4912953189848604,-0.16092507951600532,-0.9429284113976558,-0.03924578151557387,0.9346536128152511,0.0,-0.22620882219346977,0.49654388356019463,-0.164568556587735,-0.940649005644037,-0.040098312314838985,0.9318078128181799,0.0,-0.232109605300799,0.5020389040206433,-0.16804111556805448,-0.9394425625280795,-0.04089657280642883,0.9294527133588306,0.0,-0.23771957503405275,0.5077785256206158,-0.1713432911898078,-0.939303645026331,-0.04164042259799791,0.9275904905492024,0.0,-0.24303215683248716,0.513763759630623,-0.17447607604843518,-0.9401985601162989,-0.04233001575645372,0.9262059132395559,0.0,-0.24804292657284163,0.5200030226040684,-0.177440355372132,-0.9420910838404835,-0.042965499602823906,0.9252783508954144,0.0,-0.25275037068762113,0.5265067248066195,-0.18023675749958157,-0.944927425030135,-0.04354734574597344,0.9247763083171454,0.0,-0.25715841080089996,0.5332911152788103,-0.18286691423318568,-0.9486422664209317,-0.04407664115030792,0.9246602254959001,0.0,-0.26126407799903345,0.540367742742098,-0.1853268780529463,-0.9531711705833904,-0.04455335116829789,0.924892205055442,0.0,-0.2650698577828184,0.5477555030923849,-0.1876141849376895,-0.9584473518293135,-0.0449778348856559,0.9254305798155893,0.0,-0.2685802032090102,0.5554712001475842,-0.18972567829156417,-0.9643926186432822,-0.045350451192988334,0.9262282064686369,0.0,-0.271803602562537,0.5635336568217795,-0.1916592431886354,-0.970923320430686,-0.045671872476302555,0.927234634439153,0.0,-0.27474373850335765,0.5719578469141858,-0.1934099246246502,-0.9779624746346612,-0.045942097723896305,0.9284043117011173,0.0,-0.27740248122282557,0.5807511943745118,-0.19497150275540692,-0.9854290121193449,-0.04616095221546314,0.9296922027731825,0.0,-0.2797908353718209,0.5899296028447791,-0.19634238769342385,-0.9932401596204591,-0.04632929041336275,0.9310505979533722,0.0,-0.281914198686704,0.5994953076174295,-0.1975183564363967,-1.0013122401530665,-0.046447438036273075,0.9324359437073598,0.0,-0.28377486672453084,0.6094490611618723,-0.19849451784548477,-1.0095740777712958,-0.046515460874620135,0.9338122089610699,0.0,-0.2853801113898345,0.619787795537865,-0.1992690808263048,-1.0179532246512535,-0.046515460874620135,0.9351428979122438,0.0,-0.28672830073583583,0.6305019314425044,-0.19983673021812548,-1.0263750874732025,-0.04650370886186325,0.9363992345684163,0.0,-0.28783047395610667,0.6415766567255194,-0.20019976071916662,-1.0347764024256003,-0.0464251352819212,0.9375509124699785,0.0,-0.28868513793159095,0.6529873330411279,-0.20035539562413102,-1.0430974801358268,-0.046299556401027425,0.9385785820870228,0.0,-0.289292485355892,0.6647043470458938,-0.20030325681825042,-1.0512865126076016,-0.04612769757675799,0.9394671179497187,0.0,-0.28965838551250994,0.6766938619857339,-0.20004701084743554,-1.0592893668495131,-0.045911414252976186,0.9402015840136427,0.0,-0.28978204627846693,0.6889130516592671,-0.19958865575726956,-1.0670670456230857,-0.0456520718084789,0.9407769201492743,0.0,-0.28966225986125205,0.7013131438438944,-0.1989314332999091,-1.0745875486530845,-0.04535126900673141,0.9411929187034227,0.0,-0.28929405318141005,0.7138344685742785,-0.19807837220974184,-1.0818283849982313,-0.045010527188850694,0.9414564902377834,0.0,-0.28867847692174986,0.7264264268254366,-0.1970360018918603,-1.088772435364865,-0.04463200787618482,0.9415744379659993,0.0,-0.28781026550348043,0.7390237409191932,-0.1958092931613506,-1.095412888259363,-0.04421750946694134,0.9415616984223152,0.0,-0.2866867893779553,0.7515563242384161,-0.19440558195830154,-1.1017458606317718,-0.043769350292829454,0.9414352053190591,0.0,-0.28529959567568286,0.7639541262741169,-0.1928297811038296,-1.1077832335229758,-0.04328918082223404,0.9412186288133523,0.0,-0.2836435609903542,0.7761383516719154,-0.1910894251020117,-1.113536447025919,-0.04277927370407374,0.940936820178163,0.0,-0.2817138933707157,0.7880295031137148,-0.1891924513120981,-1.1190233633068882,-0.04224192253523332,0.940617026700556,0.0,-0.27950892819139994,0.7995469802522259,-0.18714847217359834,-1.1242639420939142,-0.04167974396185643,0.9402869701647649,0.0,-0.2770214097346351,0.8106036874179159,-0.1849645073029438,-1.129288994075491,-0.04109473651287951,0.939980181325261,0.0,-0.2742477874767335,0.8211210238748443,-0.18264840305462088,-1.1341310251041274,-0.04048897404113266,0.9397282141413428,0.0,-0.27118535592328574,0.8310212062203066,-0.18020778596389359,-1.1388247977622143,-0.0398644156550046,0.9395628326029174,0.0,-0.2678295922851298,0.8402255744461232,-0.1776486495750091,-1.1434091587473434,-0.039222610277264626,0.9395173259511794,0.0,-0.26418325893829075,0.8486656204502185,-0.17497914631112435,-1.1479174203957931,-0.038565479816772434,0.9396196732880512,0.0,-0.2602443783258794,0.8562762264957074,-0.1722036534110157,-1.1523882163022738,-0.03789403508444577,0.9398992185270348,0.0,-0.2560121656791843,0.8629952301840376,-0.1693258612478023,-1.1568580248501248,-0.03720908928348461,0.9403834871356738,0.0,-0.2514896249916576,0.8687617478239278,-0.16635029574443688,-1.1613579495041852,-0.0365116064978854,0.9410972474859276,0.0,-0.24667597659575458,0.8735250986790081,-0.16327736965486744,-1.165920512256848,-0.035801547840830096,0.9420636566047449,0.0,-0.2415723535816499,0.8772408230385361,-0.16010679738507763,-1.1705727597591378,-0.03507866452656383,0.9433022127754629,0.0,-0.2361809705853194,0.8798659708138784,-0.15683754449957782,-1.1753365011085064,-0.03434251586166043,0.9448300464964487,0.0,-0.23050916141851863,0.881366303037768,-0.15346956998213823,-1.180224193324645,-0.033592807435172733,0.946658587175583,0.0,-0.224557122250123,0.881705286832148,-0.14999777042592657,-1.1852494014284096,-0.03282812177715351,0.9488007857692716,0.0,-0.21833308308519597,0.8808661924116592,-0.14641891148666847,-1.1904122463006472,-0.03204731684654695,0.9512598110504996,0.0,-0.21184647935917866,0.8788320843956424,-0.14272952454608134,-1.1957058300617582,-0.03124917708311216,0.9540365087890906,0.0,-0.2051114546629331,0.8755964374521796,-0.138927305081702,-1.2011128636143338,-0.03043265841837449,0.9571256212609499,0.0,-0.19814051565373791,0.8711690570164614,-0.1350071236967743,-1.2066102756600323,-0.0295959823520444,0.9605165227123503,0.0,-0.1909434002588648,0.8655493697491592,-0.13096237863832672,-1.2121710734915445,-0.028737072530669497,0.9642001013348004,0.0,-0.18354411442535695,0.8587949842719732,-0.12679093197579833,-1.217748799614571,-0.02785452418411495,0.9681464698731441,0.0,-0.17594922695954324,0.8508729173597467,-0.12248598528402443,-1.2233077637999046,-0.02694630208436516,0.972351906873284,0.0,-0.16817827887626935,0.8418592474414022,-0.11804150170407611,-1.228792169735016,-0.026010013065141384,0.9767799704288198,0.0,-0.16024732625429372,0.8318051927427029,-0.11345156529990803,-1.2341450114646488,-0.025043372748132106,0.9814000071620459,0.0,-0.15216995322358112,0.820771739913625,-0.1087087723352693,-1.23930614591857,-0.024043716357967745,0.9861783077961757,0.0,-0.14395988501240878,0.8088177554950965,-0.10380686323965145,-1.2442113672997426,-0.023008630528679165,0.9910803302593145,0.0,-0.13563142535259437,0.7960253763352005,-0.09873994534435168,-1.2487929761238754,-0.02193570873024349,0.9960647542038257,0.0,-0.12719522819757828,0.7824677626126155,-0.09350167965290569,-1.2529831754536958,-0.0208225242340552,1.0010922342161546,0.0,-0.11866243439702528,0.7682364484719036,-0.0880869362738306,-1.2567129455786568,-0.019667057722032547,1.0061181130624803,0.0,-0.1100476207199913,0.7534185144216848,-0.08249516571224341,-1.2599112963290913,-0.018468914030095502,1.0110972224425785,0.0,-0.10136006129758833,0.7380997581773837,-0.07672273248808308,-1.2625102577312872,-0.0172281011204906,1.0159858282464689,0.0,-0.09261546776142182,0.7223695621000311,-0.0707697012881231,-1.2644395471947143,-0.01594443304956687,1.0207406619757549,0.0,-0.08383055368232284,0.706322450120967,-0.06464266229462037,-1.26563044136672,-0.014613718730925377,1.025317813876697,0.0,-0.0750176855297976,0.6900483954392373,-0.05835467392901311,-1.2660194582146909,-0.01323460693899682,1.0296696455486933,0.0,-0.06618556367410887,0.6736478769948748,-0.05191591496293399,-1.2655513254840616,-0.011810397242855134,1.0337464783954355,0.0,-0.05734813772504435,0.6572279638570531,-0.04533982597622879,-1.2641762239877923,-0.010345536831241453,1.037499775390947,0.0,-0.048518174870328196,0.6408921218990814,-0.03864127180962291,-1.2618516505654624,-0.008843713646651109,1.0408841737562595,0.0,-0.03970877644891458,0.6247458001085592,-0.03183829340799614,-1.2585449406385627,-0.007308814279568211,1.043856058555728,0.0,-0.030930342546157983,0.6088971247160003,-0.024949414579117923,-1.254236607935353,-0.005744765218992729,1.0463744304993738,0.0,-0.022193144553032697,0.5934510044424013,-0.017995282530385036,-1.24891974275399,-0.004156072032802013,1.0484022726215447,0.0,-0.013502260228686419,0.5784801250944872,-0.010993446855817608,-1.242587720914212,-0.0025468808721356524,1.049909071697544,0.0,-0.004852760117567429,0.5641356802536741,-0.0039563374320155525,-1.2352889164129617,-0.0009195376332656645,1.0508652448941087,0.0,0.003794429975619373,0.5504789923102065,0.0031142097700197742,-1.2270675330312109,0.0007292152264863924,1.0512169882199724,0.0,0.012389366584576685,0.5376207589621276,0.010214516095964674,-1.2179242750422707,0.0023869857844177546,1.0510562194014201,0.0,0.020991110174907273,0.5256060748860423,0.01732545962814261,-1.2079705052262428,0.004060102435584408,1.0502685622386034,0.0,0.02960989505725729,0.5145063979884703,0.02445377301951251,-1.1972589735327175,0.005746746468599951,1.0488904160728654,0.0,0.03826376458485421,0.504365368758308,0.03159901401069304,-1.1858610861914742,0.007446466721179127,1.0469260931532423,0.0,0.046964558785750996,0.49521685031437485,0.0387548786379604,-1.1738554052767443,0.009157575005164398,1.0443868231824827,0.0,0.05572554749820486,0.48707886950673207,0.0459165894222075,-1.1613184661402474,0.010878718746727864,1.0412881443110031,0.0,0.06455264274681768,0.47996101450263523,0.053073694890757805,-1.148333072289729,0.012607149581212661,1.0376517397737197,0.0,0.07343704514270313,0.47385759176894393,0.06020442070607879,-1.1349853471340057,0.014337370833812084,1.033506567173661,0.0,0.08235037207667323,0.4687422413101388,0.06727235760281615,-1.1213623925985508,0.016060337772289685,1.0288898364927654,0.0,0.09125098458025233,0.4645780142433628,0.07423245256680622,-1.1075645664959803,0.01776479992176627,1.023849893022625,0.0,0.10008860264416805,0.4613135856473911,0.08103562662326794,-1.0936989353281517,0.019438402728729872,1.018444871175007,0.0,0.10881633621212271,0.4588932439925244,0.08763898557525031,-1.079883285646199,0.02107007157354235,1.0127418073460528,0.0,0.11739070179177155,0.4572573348260574,0.09400620733114656,-1.066243992518779,0.0226501031331078,1.0068158509161673,0.0,0.1257789947033668,0.45634147603912334,0.10011308325288987,-1.0528995710540048,0.024171572881340822,1.0007428438313795,0.0,0.13396858885823765,0.4560936642040809,0.1059541889573094,-1.0399730457620546,0.02563183677290512,0.9945996298541973,0.0,0.14195434497539258,0.45645649177387065,0.11153204800352995,-1.0275624381795132,0.027030182370219147,0.9884552894547657,0.0,0.14974976964966905,0.45738669714714475,0.11686479331712332,-1.015756513846334,0.028369551204668723,0.9823718583919925,0.0,0.15737666104869463,0.45885040893610946,0.12197756793121471,-1.0046341540318604,0.029654541358427006,0.9764051625467717,0.0,0.16485470025515306,0.46081595775286505,0.12689445458556858,-0.9942616570112354,0.03088956947588536,0.9706054028925267,0.0,0.17220305549344467,0.4632590659033369,0.13163971206720707,-0.9847014292698841,0.03207909526226485,0.9650195862560568,0.0,0.17942976787601633,0.46615618066893244,0.13623042316561332,-0.9760172506462172,0.03322583427998051,0.9596962834403455,0.0,0.18653801591888114,0.4694873684771509,0.14068063622868926,-0.9682699750094482,0.03433168335928888,0.9546823506878395,0.0,0.19351040857713994,0.47322242944223053,0.14499078459924697,-0.9615168479186723,0.03539529113352523,0.9500265192431168,0.0,0.20032797006754655,0.47733698951661585,0.14916095432808957,-0.9558140795129555,0.03641514088661864,0.9457749291975053,0.0,0.20696928757755764,0.48180612670604134,0.15318932339095168,-0.9511982628087814,0.037389518122030896,0.9419632596035696,0.0,0.213402854935822,0.48660245781020484,0.15706790600159726,-0.9477017235513443,0.03831544561519612,0.9386249684076832,0.0,0.21960502240941743,0.4917017481089196,0.1607919910944997,-0.9453214976366298,0.03919118021152142,0.9357732381917001,0.0,0.225552705455168,0.49708509872848927,0.16435619501146376,-0.9440472501917145,0.04001503166671383,0.9334145445966505,0.0,0.23123675291051857,0.5027429717569541,0.16776069723605863,-0.9438375475328221,0.04078690399838959,0.9315346459329348,0.0,0.23664829708031454,0.5086704691945452,0.171004260941068,-0.9446464041837812,0.041506472470832986,0.9301137387202254,0.0,0.24178331002942907,0.5148714074988056,0.17408725663610905,-0.9464232101183349,0.04217396945508189,0.9291255163301708,0.0,0.2466435834085617,0.5213524422338989,0.1770111493492646,-0.9490969172338682,0.042790308132395115,0.9285313532422359,0.0,0.2512288194838467,0.5281246479365609,0.17977508316615887,-0.9526048835373715,0.04335596779567038,0.9282953348513975,0.0,0.2555370212950232,0.535200010895812,0.18237584130549261,-0.9568853259794888,0.04387095915832761,0.9283812923491758,0.0,0.2595709602890257,0.542591875410869,0.18481108325835455,-0.9618641079036256,0.044335678048388276,0.9287459025358193,0.0,0.2633312039690516,0.5503136007206255,0.1870764695982776,-0.9674719258688597,0.044750065759327745,0.9293482567980805,0.0,0.266810220982041,0.5583680042133549,0.18916271351002506,-0.9736405907192599,0.0451130315416525,0.9301511318930636,0.0,0.27000681015265526,0.5667623520792157,0.19106355922327345,-0.9802989608695931,0.04542425087351055,0.9311146063239195,0.0,0.2729111615983357,0.5754990849943392,0.1927685989759917,-0.9873915212761726,0.04568236483194074,0.932208427532456,0.0,0.2755214928482394,0.5845840347411676,0.1942713559309646,-0.9948543886627741,0.04588701770710256,0.9333973577363287,0.0,0.277840737916549,0.5940176424017293,0.19556755174921214,-1.0026116335049875,0.04603850383686335,0.9346420285425766,0.0,0.2798692732361293,0.6038026530040591,0.1966522863601059,-1.0106023163711035,0.046136816224870154,0.9359106034481214,0.0,0.2816153185421037,0.6139334320189662,0.19752473436498152,-1.0187465277337204,0.04618307886360364,0.9371646085045133,0.0,0.28309303813239467,0.6244096865786155,0.1981873511617226,-1.0269677300552884,0.04618307886360364,0.9383660206937936,0.0,0.28431474357916564,0.6352232494509492,0.19864403700207556,-1.035194161474955,0.04612666314039319,0.939484260568879,0.0,0.2853007085049326,0.646368077290905,0.19890119932755834,-1.0433493313664852,0.04602863539281583,0.9404833073989262,0.0,0.2860727225069524,0.6578330286857337,0.19896858561764547,-1.0513599649647631,0.04588800254312034,0.9413330619442885,0.0,0.2866588149417308,0.6696038842968927,0.1988597118747405,-1.0591495568933347,0.045708809926623246,0.9420027726116477,0.0,0.28708695017020597,0.681664064738071,0.19858922827023143,-1.0666501987117156,0.045495145563588996,0.9424671335742119,0.0,0.2873711619296756,0.6939740980263259,0.1981669046232651,-1.0738108957341643,0.04524996173243833,0.9427153544312876,0.0,0.2875084816945279,0.7064850905840825,0.19759567820138813,-1.080611218924822,0.04497451336383421,0.9427537361280989,0.0,0.2874886938182243,0.7191425416157093,0.19687613637168494,-1.0870466555636622,0.04466947016860771,0.9425971833054588,0.0,0.28728216992186234,0.7318766721286011,0.19600081390320892,-1.0931401040695718,0.044333655636639324,0.9422767948475037,0.0,0.286852116723354,0.7446151051426232,0.1949595635746719,-1.098928967266464,0.043965297476379006,0.9418302036542079,0.0,0.2861483251813215,0.7572773363931242,0.19373649757742384,-1.1044698115841367,0.043561356849705885,0.9413049719886122,0.0,0.2851170157486475,0.7697824241297,0.19231424827820184,-1.1098265498749817,0.043118526664227004,0.9407510220449239,0.0,0.28369555811645814,0.782058966672269,0.19067011130242156,-1.1150783369006023,0.042632248345713115,0.9402219037656587,0.0,0.2818204065538804,0.7940299191818703,0.18878071060568083,-1.1203025643049926,0.042097942857387854,0.9397705659679503,0.0,0.2794382814477242,0.8056445080627511,0.1866248772997251,-1.125568141031836,0.041511398960619644,0.9394386794048378,0.0,0.27648683690352016,0.816109245854458,0.18423619601347221,-1.1308304228420563,0.0408862830627412,0.9393899097200981,0.0,0.27322946133981646,0.8261233197607177,0.18169746003479148,-1.1359629740432275,0.04023621597439445,0.9393961366593611,0.0,0.26966883413264986,0.8356308330999944,0.1790160161195462,-1.140985430324702,0.03956250723443357,0.9394772678634398,0.0,0.26580777572955727,0.8445747854142654,0.17619875983163696,-1.1459190246317792,0.03886684129053463,0.9396540561000772,0.0,0.26164936238559033,0.8528972641517865,0.17325214703151237,-1.1507862243506723,0.038150761857926145,0.939947736395748,0.0,0.25719700688832847,0.8605396815350363,0.17018213982135683,-1.1556102607917091,0.037415664775917165,0.9403798051949475,0.0,0.2524545363887606,0.8674430188854153,0.1669941571467435,-1.1604146174832772,0.036662787221566774,0.9409717908664884,0.0,0.24742626659921768,0.8735480790679988,0.16369302958736162,-1.1652224776605882,0.03589319750692649,0.9417450147762937,0.0,0.24211707147292932,0.8787957483946028,0.16028295886514962,-1.1700561310230506,0.03510778551845405,0.9427203426059589,0.0,0.2365324475010102,0.8831272699314164,0.1567674823559014,-1.1749363397427344,0.03430725383710775,0.9439179256025012,0.0,0.2306785717941294,0.8864845308350262,0.1531494426746595,-1.1798816635972842,0.03349210952173513,0.9453569313851522,0.0,0.22456235314789358,0.888810367112205,0.14943096223797858,-1.1849077439749616,0.03266265649362751,0.9470552637832669,0.0,0.21819147529574795,0.890048890094466,0.14561342264120866,-1.1900265463613273,0.031818988442644094,0.9490292709048261,0.0,0.2115744315241006,0.89014583996553,0.14169744875063076,-1.1952455607762371,0.03096098218927759,0.9512934401996519,0.0,0.20472054975348397,0.8890489728979619,0.13768289763381938,-1.2005669595174924,0.03008829145083479,0.9538600786142354,0.0,0.1976400075850219,0.8867084898243004,0.13356885204126806,-1.2059867112748308,0.02920034119668813,0.9567389754915827,0.0,0.19034383531831997,0.883077516339737,0.1293536208751689,-1.2114936513264736,0.028296322192101153,0.9599370433201616,0.0,0.18284390792939492,0.8781126454514988,0.12503474472720022,-1.2170685061764963,0.027375186939452692,0.9634579330877094,0.0,0.1751539446310153,0.8718056900650295,0.12060761013751826,-1.2226799392629142,0.026435199340632973,0.9672932946717954,0.0,0.1672853346597647,0.8640598191161866,0.11607115133178354,-1.2282954642496318,0.025475737549608565,0.9714556683539648,0.0,0.15925336158258727,0.8548772612991274,0.11141928534802283,-1.2338620777855127,0.024494574233961786,0.975927871451874,0.0,0.1510729016040098,0.8442356752938995,0.10664678018261246,-1.2393174274457224,0.023489699639936606,0.9806958285736671,0.0,0.14275939530086065,0.8321203897507209,0.10174788572630925,-1.2445855188685278,0.02245889007368119,0.9857395504034866,0.0,0.1343287210365826,0.8185256755399981,0.09671647682420129,-1.249575509655607,0.02139973306451433,0.991032336562018,0.0,0.12579702154748867,0.8034562086081501,0.09154626001120685,-1.2541805015093863,0.02030969726663455,0.9965398169660017,0.0};
		T xGoals[200] = {0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004,0.6556285000000004};
		T yGoals[200] = {0.13686922001827645,0.1281183229143938,0.11926059413541247,0.11030432312999372,0.1012577993467988,0.09212931223448896,0.08292715124172548,0.0736596058171696,0.06433496540948258,0.05496151946732569,0.045547557439360176,0.03610136877424733,0.026631242920648335,0.017145469327224508,0.007652337442637103,-0.001839863284452653,-0.011322843405383448,-0.020788313471494096,-0.030227984034123273,-0.039633565644609764,-0.0489967688542923,-0.05830930421450961,-0.06756288227660043,-0.07674921359190354,-0.08586000871175764,-0.09488697818749958,-0.1038655258329727,-0.11272375591745916,-0.12145267616480321,-0.13004109492853494,-0.13848752180117063,-0.1467858524541864,-0.1549281455978588,-0.1629165235905652,-0.1707482796892309,-0.17841599130217783,-0.18591882035832843,-0.1932502389635062,-0.20040076105913676,-0.20735798772338723,-0.21411519853223893,-0.22066551450768562,-0.2269966386554578,-0.2331053523296066,-0.23897989082424964,-0.24461177603116246,-0.24999586174091798,-0.255127737887603,-0.2600037985005273,-0.264623973362925,-0.2689800086072113,-0.27306787696210033,-0.2768840041676995,-0.2804279779836409,-0.28369462501981374,-0.28667669709392635,-0.2893761036490012,-0.29178950599107006,-0.29391158123626243,-0.29574034972478985,-0.29727453396452347,-0.29851358128156347,-0.2994544451742904,-0.30009482660988346,-0.30043907902783173,-0.30048644363405164,-0.3002369544043975,-0.29968819678814346,-0.2988444313574429,-0.2977048064508765,-0.2962719042333858,-0.29454317198576974,-0.2925200231035754,-0.2902045731500091,-0.2876022809123594,-0.2847133796914938,-0.28154140071122247,-0.27809048676073667,-0.27436270583704647,-0.2703665745543449,-0.26610524813698555,-0.26158238012185503,-0.25680474076422527,-0.2517742032662073,-0.2464935808285531,-0.24096598110942027,-0.23519855715870805,-0.22919065210989617,-0.22294815964121067,-0.216477551020404,-0.20978904844956445,-0.20289009717093992,-0.19578529751522875,-0.18849136560284127,-0.1810102720333381,-0.17335332623615154,-0.16552932116242403,-0.15754446533330008,-0.1494055335341655,-0.141119776212369,-0.13269158757842503,-0.12412621123921029,-0.11543344583116043,-0.10661783052843572,-0.09768974155699829,-0.08866263788534111,-0.07955032956578706,-0.07036309089673469,-0.06111613853088287,-0.051824258760106816,-0.04250384833178472,-0.03316965050170948,-0.02383739609051122,-0.014517898480146497,-0.00521285872839692,0.004084069854356758,0.013377716369566438,0.022678964415954628,0.03199791841264746,0.04134623887290685,0.05072829056150665,0.06014998301207159,0.06960936374549687,0.07908892160637689,0.08855068744478754,0.09794356384062872,0.10720878615596977,0.11629326145552335,0.12514991959047528,0.13374545516319478,0.14207020091055017,0.15012393938707272,0.15792746608076888,0.16551126865840357,0.1729042968130615,0.18013571994835326,0.1872239892183252,0.19418299168723718,0.20100573965434845,0.2076839316858779,0.2142059797503866,0.22054968628960595,0.22669845070103078,0.2326348093954518,0.2383522458039774,0.24384287073319427,0.2491022174907651,0.2541293098371375,0.2589202699947854,0.2634683865999179,0.2677700650071298,0.27181899023759926,0.2756002672767167,0.2791048721375289,0.28231577838682104,0.28522354073704403,0.2878230537497963,0.2901076694828819,0.2920783437903407,0.29374310403406084,0.295107993386028,0.2961895263765827,0.2970056784978085,0.2975819271104611,0.29794495005548816,0.298109264082986,0.2980740741579594,0.2978323971097816,0.2973591836734637,0.296622924641549,0.2955794967043364,0.29418154658089085,0.2923728011959445,0.2900962060295761,0.2873037962354698,0.28396753800504204,0.28032650994085717,0.2763886650341475,0.27216195627614015,0.26765433665806226,0.2628737591711411,0.2578281768066035,0.25252554255567694,0.2469738094095883,0.2411809303595648,0.2351548583968336,0.2289035465126218,0.22243494769815644,0.21575701494466482,0.208877701243374,0.201804959585511,0.19454674296230312,0.1871110043649775,0.179505696784761,0.1717387732128811,0.16381818664056474,0.1557518900590391,0.14754783645953137,0.1392139788332685,0.1307582701714778};
		T zGoals[200] = {0.31756840547539744,0.32748579299353975,0.3378005717933035,0.3484792783644661,0.3594884491968049,0.3707946207800972,0.38236432960412026,0.39416411215865155,0.40616050493346834,0.4183200444183479,0.4306092671030677,0.44299470947740494,0.455442908031137,0.4679203992540413,0.48039371963589506,0.49282940566647565,0.5051939938355604,0.5174540206329267,0.5295760225483518,0.541526536071613,0.5532720976924878,0.5647792439007534,0.5760145111861872,0.5869444360385665,0.5975355549476685,0.607754404403259,0.617684862624283,0.6269833110602612,0.6356398015809976,0.6436439919363848,0.6509877754875409,0.6576613603932012,0.6636610682008525,0.6689826360732843,0.67361769235995,0.6775587102765505,0.6807894425694675,0.6832982853518634,0.6850685995152646,0.6860878343790213,0.6863475050397387,0.6858378423067206,0.6845542073433015,0.6824970237151333,0.679674950734998,0.6760903644476528,0.6717601780334646,0.6666986364356934,0.6609289904640975,0.6544774785385726,0.6473731907857357,0.6396420054814256,0.6313175949625012,0.6224353167682047,0.6130293234274724,0.6031408593626014,0.592806201725962,0.5820708170060365,0.5709740379170426,0.5595578699404182,0.5478698928627949,0.5359537973679934,0.5238581689279385,0.5116302430406027,0.4993208702348768,0.48697884889804044,0.4746532265736393,0.4623956012593628,0.4502485492310045,0.4382596910462214,0.42647866542842733,0.41494764320821875,0.4037154159777041,0.39282851027202587,0.3823335341683771,0.37227688282859595,0.36269856168881953,0.3536372194160615,0.3451304536909037,0.33721132075471055,0.32990808625336293,0.32324779496703726,0.3172587080115004,0.31196097533352374,0.3073723368592661,0.3035111825862362,0.3003931753833552,0.29803437903462704,0.2964420439874006,0.29562574916758594,0.2955914743255737,0.29633569503272444,0.29786307504133164,0.3001661781693752,0.30323465990169074,0.3070520940451594,0.3115998595664622,0.31685456748736623,0.3227967201975068,0.32939373258736826,0.336620401368088,0.34444137126548074,0.35282689981652365,0.3617486647489115,0.37117885795827055,0.3810878162585716,0.39144908831456365,0.4022280096944361,0.41338530657545247,0.42488278556704895,0.43667841400710394,0.4487240639652002,0.46096913859882693,0.47336419850958344,0.48584480962195276,0.4983474665337738,0.5108078008561817,0.5231640943169621,0.5353543092708679,0.5473260617454424,0.5590277695983947,0.5704169154454125,0.5814512174681081,0.5920942512854084,0.6023199392964617,0.6120999705542476,0.6214094905886763,0.6302189177557694,0.6384948605857313,0.6462095585403849,0.6533240617001391,0.6598152959296799,0.6656559786178493,0.6708180864798622,0.6752789417653723,0.6790134023420558,0.6819951301275096,0.6841972139799184,0.6856012933475145,0.6861863032005122,0.6859428344922742,0.6848659833744687,0.6829691340687087,0.6802671521438632,0.6767869940428872,0.6725559197263683,0.6675988289655357,0.6619506036376687,0.6556389703050904,0.6486908922059266,0.6411394935332501,0.6330153548211616,0.6243554553896911,0.6151955559582207,0.6055661079526033,0.5954998822170263,0.5850395750753018,0.5742180207932119,0.563083467349193,0.5516783030193103,0.5400466850891197,0.5282336225055959,0.5162846587691582,0.5042482411832561,0.49216898910506657,0.4800977462683095,0.4680759949262634,0.45614115835012375,0.4443280391401759,0.4326669709393109,0.42118572108087715,0.40991017010577024,0.3988536909103188,0.3880358943577357,0.37746325851094437,0.3677153816185399,0.3583626678734707,0.34943548878219216,0.34096421585115233,0.33297922058679913,0.3255108744955808,0.3185895490839454,0.31224561585834093,0.30650944632521565,0.30141141199101745,0.2969818843621946,0.29325123494519506,0.29024983524646697,0.28800805677245844,0.2865562710296175,0.28592484952439223,0.2861441637632308,0.28724458525258123,0.2892564854988917,0.2922102360086102,0.2961362082881848,0.30106477384406377,0.30702630418269494,0.3140511708105266,0.32216974523400665};

    	LCM_Fig8Goal_Handler(double tTime, double eLim, double vLim, int iL = MAX_ITER, int tL = MAX_SOLVER_TIME, bool PD = 0) : 
    		totalTime(tTime), eNormLim(eLim), vNormLim(vLim), iterLimit(iL), timeLimit(tL), PDGoals(PD) {
    		zeroTime = 0; inFig8 = 0; costSent = 0;	totalError = 0;	numIters = 0; currRep = 0;
    		if(!lcm_ptr.good()){printf("LCM Failed to Init in Goal Handler\n");}
    	}
    	~LCM_Fig8Goal_Handler(){}

    	// fig 8 goals
    	int loadFig8Goal(T *goal, double time, T *qgoal = nullptr){
			int numGoals = 200; 	double tstep = totalTime/(numGoals-1);	double goalNum = time/tstep;
			double fraction = goalNum - std::floor(goalNum);				int rep = static_cast<int>(std::floor(goalNum)) / numGoals;
			int rd = static_cast<int>(std::floor(goalNum)) % numGoals;		int ru = static_cast<int>(std::ceil(goalNum)) % numGoals;
			goal[0] = (1-fraction)*xGoals[rd] + fraction*xGoals[ru];		goal[3] = 0.0;
			goal[1] = (1-fraction)*yGoals[rd] + fraction*yGoals[ru];		goal[4] = 0.0;
			goal[2] = (1-fraction)*zGoals[rd] + fraction*zGoals[ru];		goal[5] = 0.0;
			if (qgoal != nullptr){for(int i = 0; i < NUM_POS; i++){qgoal[i] = (1-fraction)*qGoals[rd*7+i] + fraction*qGoals[ru*7+i];}}
			return rep;
		}

		// load initial goal
    	void loadInitialGoal(T *goal){loadFig8Goal(goal,0);}

    	// load nominal target
    	void loadInitialTarget(T *goal, T *target = nullptr){for(int i = 0; i < STATE_SIZE_PDDP; i++){goal[i] = (target == nullptr) ? 0 : target[i];}}

    	// keep track of traj times
    	void newTrajCallback_f(const lcm::ReceiveBuffer *rbuf, const std::string &chan, const drake::lcmt_trajectory_f *msg){
            if (inFig8){gettimeofday(&end,NULL); timeCount++; timeTotal += time_delta_ms(start,end);} gettimeofday(&start,NULL);
        }
        void newTrajCallback_d(const lcm::ReceiveBuffer *rbuf, const std::string &chan, const drake::lcmt_trajectory_d *msg){
            if (inFig8){gettimeofday(&end,NULL); timeCount++; timeTotal += time_delta_ms(start,end);} gettimeofday(&start,NULL);
        }

		// update goal based on status
		void handleStatus(const lcm::ReceiveBuffer *rbuf, const std::string &chan, const drake::lcmt_iiwa_status *msg){
			// get current goal
			T goal[3]; double time = inFig8 ? msg->utime - zeroTime : 0; int rep = loadFig8Goal(goal,time);
			// compute the position error norm and velocity norm
			T eNorm; T vNorm; T currX[STATE_SIZE_PDDP]; T eePos[NUM_POS];
			for(int i=0; i < STATE_SIZE_PDDP; i++){
				if(i < NUM_POS){currX[i] = static_cast<T>(msg->joint_position_measured[i]);}
				else{			currX[i] = static_cast<T>(msg->joint_velocity_estimated[i-NUM_POS]);}
			}
			evNorm<T>(currX, goal, &eNorm, &vNorm, eePos);		totalError += static_cast<double>(eNorm);	numIters++;
			// debug print
			// printf("[%f] eNorm[%f] vNorm[%f] for goal[%f %f %f] and Pos[%f %f %f]\n",static_cast<double>(msg->utime),eNorm,vNorm,goal[0],goal[1],goal[2],eePos[0],eePos[1],eePos[2]);
			// print the error for each rep
			if(rep > currRep){
				printf("[!] Rep [%d] has total error [%f] with time [%f]\n",rep,totalError/numIters,timeTotal/timeCount); 
				totalError = 0; numIters = 0; currRep++; timeCount = 0; timeTotal = 0;
			}
			// then figure out if we are in the goal moving time
			if(inFig8){
				// then load in goal pos and zero out vel, orientation, angularVelocity (for now) -- note orientation is size 4 (quat)
				kuka::lcmt_target_twist dataOut;               dataOut.utime = msg->utime;
				for (int i = 0; i < 3; i++){dataOut.position[i] = static_cast<float>(goal[i]);	dataOut.velocity[i] = 0;	
											dataOut.orientation[i] = 0;							dataOut.angular_velocity[i] = 0;}
				dataOut.orientation[3] = 0;
				// and publish it to goal channel
			    lcm_ptr.publish(ARM_GOAL_CHANNEL,&dataOut);
			}
			else {
				// else check to see if we should update goal next time
				if (eNorm < eNormLim && vNorm < vNormLim){
					// reset the zeroTime and set that we are inFig8
					zeroTime = msg->utime;		inFig8 = 1;		totalError = 0;		numIters = 0;
					// also update the solver params for this experiment
					kuka::lcmt_solver_params dataOut;	dataOut.utime = msg->utime;
					dataOut.timeLimit = timeLimit;		dataOut.iterLimit = iterLimit;		
					dataOut.clearVars = 0;              dataOut.useCostShift = 0;
					lcm_ptr.publish(SOLVER_PARAMS_CHANNEL,&dataOut);
				}
				// else if close but not there yet update the cost func to care more about moving to goals
				else if (!costSent && eNorm < 2.5*eNormLim && vNorm < 2.5*vNormLim){
					kuka::lcmt_cost_params dataOut;		dataOut.utime = msg->utime;
					dataOut.q_ee1   = static_cast<float>(_Q_EE1_fig8);		dataOut.q_ee2   = static_cast<float>(_Q_EE2_fig8);
					dataOut.qf_ee1  = static_cast<float>(_QF_EE1_fig8);		dataOut.qf_ee2  = static_cast<float>(_QF_EE2_fig8);
					dataOut.q_eev1  = static_cast<float>(_Q_EEV1_fig8);		dataOut.q_eev2  = static_cast<float>(_Q_EEV2_fig8);
					dataOut.qf_eev1 = static_cast<float>(_QF_EEV1_fig8);	dataOut.qf_eev2 = static_cast<float>(_QF_EEV2_fig8);
					dataOut.q_xdee  = static_cast<float>(_Q_xdEE_fig8);		dataOut.qf_xdee = static_cast<float>(_QF_xdEE_fig8);
					dataOut.q_xee   = static_cast<float>(_Q_xEE_fig8);		dataOut.qf_xee  = static_cast<float>(_QF_xEE_fig8);
					dataOut.r_ee    = static_cast<float>(_R_EE_fig8);		dataOut.r       = static_cast<float>(_R);
					dataOut.q1      = static_cast<float>(_Q1); 				dataOut.q2      = static_cast<float>(_Q2);
					dataOut.qf1     = static_cast<float>(_QF1); 			dataOut.qf2     = static_cast<float>(_QF2);
					lcm_ptr.publish(COST_PARAMS_CHANNEL,&dataOut);
					costSent = 1;
				}
			}
			// if in PD mode publish the PD goal to the hardware/sim -- above publishers will be ignored but/and are harmless
			if (PDGoals){
				T qgoal[7];	int rep = loadFig8Goal(goal,time,qgoal);
				// construct output msg container and load zeros into everything but the position where we send the goal
	            #if HARDWARE_MODE
	                drake::lcmt_iiwa_command_hardware dataOut;
	                #pragma unroll
	                for(int i=0; i < 6; i++){dataOut.wrench[i] = 0.0;}
	            #else
	                drake::lcmt_iiwa_command dataOut;   
	                dataOut.num_torques = static_cast<int32_t>(CONTROL_SIZE);
	            #endif
	            dataOut.num_joints = static_cast<int32_t>(NUM_POS);         dataOut.joint_position.resize(dataOut.num_joints);
	            dataOut.utime = static_cast<int64_t>(msg->utime);           dataOut.joint_torque.resize(dataOut.num_joints);  // NUM_POS = CONTROL_SIZE for arm so this works
	            for(int i = 0; i < CONTROL_SIZE; i++){dataOut.joint_torque[i] = 0;}
	            double fraction = 1.0;//inFig8 ? 0.5 : 0.2;
            	for(int i = 0; i < NUM_POS; i++){dataOut.joint_position[i] = fraction*static_cast<double>(qgoal[i]) + (1.0-fraction)*msg->joint_position_measured[i];}
            	// printf("sending goal of: %f %f %f %f %f %f %f vs. curr %f %f %f %f %f %f %f\n",dataOut.joint_position[0],dataOut.joint_position[1],dataOut.joint_position[2],
            	// 				dataOut.joint_position[3],dataOut.joint_position[4],dataOut.joint_position[5],dataOut.joint_position[6],msg->joint_position_measured[0],
            	// 				msg->joint_position_measured[1],msg->joint_position_measured[2],msg->joint_position_measured[3],msg->joint_position_measured[4],
            	// 				msg->joint_position_measured[5],msg->joint_position_measured[6]);
	            lcm_ptr.publish(ARM_COMMAND_CHANNEL,&dataOut);
			}
			
		}
};
template <typename T>
void runFig8GoalLCM(LCM_Fig8Goal_Handler<T> *handler){
	lcm::LCM lcm_ptr; if(!lcm_ptr.good()){printf("LCM Failed to init in goal handler\n");}
	lcm::Subscription *sub = lcm_ptr.subscribe(ARM_STATUS_FILTERED, &LCM_Fig8Goal_Handler<T>::handleStatus, handler); lcm::Subscription *sub2;
	if (std::is_same<T, float>::value){sub2 = lcm_ptr.subscribe(ARM_TRAJ_CHANNEL, &LCM_Fig8Goal_Handler<T>::newTrajCallback_f, handler);}
    else if (std::is_same<T, double>::value){sub2 = lcm_ptr.subscribe(ARM_TRAJ_CHANNEL, &LCM_Fig8Goal_Handler<T>::newTrajCallback_d, handler);}
    else{printf("Timing only defined for floats and doubles\n");}
    sub->setQueueCapacity(1); sub2->setQueueCapacity(1);
    while(0 == lcm_ptr.handle());
    // while(1){lcm_ptr.handle();usleep(5000);}
}

template <typename T>
__host__
int runMPC_LCM(char mode, T *xInit, bool PDDemoMode = 0){
	// launch the simulator
    // printf("Make sure the drake kuka simulator or kuka hardware is launched!!!\n");
	// get the max iters and time per solve
	printf("[For the initial step] What is the maximum number of iterations a solver can take? (q to exit)?\n");
	int itersToDo_init = getInt(1000, 1);
	// printf("[For the initial step] What should the MPC time budget be (in ms)? (q to exit)?\n");
	int timeLimit_init = 1000; //getInt(1000, 1); //note in ms
	printf("[For the figure eight] What is the maximum number of iterations a solver can take? (q to exit)?\n");
	int itersToDo = getInt(1000, 1);
	// printf("[For the figure eight] What should the MPC time budget be (in ms)? (q to exit)?\n");
	int timeLimit = 10000; //getInt(1000, 1); //note in ms
	// get the total traj time
	printf("How many seconds long should one figure eight of the tracked trajectory be? (q to exit)\n");
	double totalTime_us = 1000000.0*static_cast<double>(getInt(100, 1));
	// allocate variables and load inital variables
	trajVars<T> *tvars = new trajVars<T>; matDimms *dimms = new matDimms; algTrace<T> *atrace = new algTrace<T>;
	costParams<T> *cst = new costParams<T>;	loadCost(cst); // load in default cost to start
    std::thread mpcThread; LCM_MPCLoop_Handler<T> *mpchandler; CPUVars<T> *cvars; GPUVars<T> *gvars; // pointers for reference later
    // allocate for CPU / GPU
    if (mode == 'G'){gvars = new GPUVars<T>; allocateMemory_GPU_MPC<T>(gvars, dimms, tvars);}
    else{		     cvars = new CPUVars<T>; allocateMemory_CPU_MPC<T>(cvars, dimms, tvars);}
    // get the goal handler
    LCM_Fig8Goal_Handler<T> *goalhandler = new LCM_Fig8Goal_Handler<T>(totalTime_us, E_NORM_LIM, V_NORM_LIM, itersToDo, timeLimit);
    // then load the goals and LCM handlers and launch the MPC threads
    if (mode == 'G'){
    	// load initial traj and goal and run to full convergence to warm start
    	loadTraj<T>(gvars, tvars, dimms, xInit);	goalhandler->loadInitialGoal(gvars->xGoal);		goalhandler->loadInitialTarget(gvars->xTarget,xInit);
    	runiLQR_MPC_GPU<T>(tvars,gvars,dimms,atrace,cst,0,0,1);
		// then create the handler and launch the MPC thread
		mpchandler = new LCM_MPCLoop_Handler<T>(gvars,tvars,dimms,atrace,cst,itersToDo_init,timeLimit_init);
     	mpcThread  = std::thread(&runMPCHandler<T>, mpchandler);    
    }
    else{
    	// load initial goal and run to full convergence to warm start
    	loadTraj<T>(cvars, tvars, dimms, xInit);	goalhandler->loadInitialGoal(cvars->xGoal);		goalhandler->loadInitialTarget(cvars->xTarget,xInit);
    	runiLQR_MPC_CPU<T>(tvars,cvars,dimms,atrace,cst,0,0,1);
		// then create the handler and launch the MPC thread
		mpchandler = new LCM_MPCLoop_Handler<T>(cvars,tvars,dimms,atrace,cst,itersToDo_init,timeLimit_init);
     	mpcThread  = std::thread(&runMPCHandler<T>, mpchandler);   
     	if(FORCE_CORE_SWITCHES){setCPUForThread(&mpcThread, 1);} // move to another CPU
    }
    // launch the goal monitor
    std::thread goalThread = std::thread(&runFig8GoalLCM<T>, goalhandler);
    // launch the trajRunner
    std::thread trajThread = std::thread(&runTrajRunner<T>, dimms, TRAJ_RUNNER_ALPHA, PDDemoMode);
    // launch the status filter if needed
    #if USE_VELOCITY_FILTER
    	std::thread filterThread = std::thread(&run_IIWA_STATUS_filter<T>);
	#endif
    printf("All threads launched -- check simulator/hardware output!\n");
    mpcThread.join();	trajThread.join();	goalThread.join();
    #if USE_VELOCITY_FILTER
    	filterThread.join();
    #endif
    if (mode == 'G'){freeMemory_GPU_MPC<T>(gvars); delete gvars;} else{freeMemory_CPU_MPC<T>(cvars); delete cvars;}
    freeTrajVars<T>(tvars); delete tvars; delete atrace; delete dimms; delete cst; delete mpchandler; delete goalhandler;
    return 0;
}

template <typename T>
__host__
int runPDGoals(){
	printf("How many seconds long should one figure eight of the tracked trajectory be? (q to exit)\n");
	double totalTime_us = 1000000.0*static_cast<double>(getInt(100, 1));
	// construct goal handler in PD mode
    LCM_Fig8Goal_Handler<T> *handler = new LCM_Fig8Goal_Handler<T>(totalTime_us, E_NORM_LIM, V_NORM_LIM, 0, 0, 1);
    // subscribe to arm status and run
    lcm::LCM lcm_ptr; if(!lcm_ptr.good()){printf("LCM Failed to init in PD goals loop\n");}
	lcm::Subscription *sub = lcm_ptr.subscribe(ARM_STATUS_FILTERED, &LCM_Fig8Goal_Handler<T>::handleStatus, handler);
	sub->setQueueCapacity(1); while(0 == lcm_ptr.handle()); return 0;
}

int main(int argc, char *argv[])
{
	// init rand
	srand(time(NULL));
	// initial state for example
	algType xInit[STATE_SIZE_PDDP]; loadInitialState(xInit,1);
	// require user input for mode of operation
	char mode = '?'; if (argc > 1){mode = argv[1][0];}
	// run the MPC loop
	if (mode == 'C' || mode == 'G'){return runMPC_LCM<algType>(mode,xInit);}
	// run the PD control loop to demo motion
	else if(mode == 'Z'){return runMPC_LCM<algType>('G',xInit,1);}
	// run the pure PD goals w/o any solver publisher
	else if(mode == 'D'){return runPDGoals<algType>();}
	// run aditional example options (printers, simulator, goal only, etc.)
	else{return runOtherOptions<algType>(mode,xInit,argv);}
}